{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a1e2c303",
   "metadata": {},
   "source": [
    "# Plant Village subset \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "942f2fd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Required packages\n",
    "\n",
    "import tensorflow as tf\n",
    "import sys\n",
    "import json\n",
    "import math\n",
    "import keras\n",
    "import keras.backend as K\n",
    "import numpy as np\n",
    "import pickle\n",
    "import cv2\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "from os import listdir\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "from keras.models import Sequential\n",
    "from keras import backend as K\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras.optimizers import Adam\n",
    "from keras.preprocessing import image\n",
    "from tensorflow.keras.utils import img_to_array\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "from sklearn.model_selection import train_test_split\n",
    "import matplotlib.pyplot as plt\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f528b84c",
   "metadata": {},
   "source": [
    "### Introduction\n",
    "\n",
    "In this file, we separate a subset of the plant village data for use in the activation function investigation. The file structure containing the data is as follows:\n",
    "```\n",
    "..\\Data\\PlantVillage\\Pepper__bell___Bacterial_spot \n",
    "                       \\Pepper__bell___healthy\n",
    "                       \\Potato___Early_blight\n",
    "                       \\Potato___healthy\n",
    "                       \\Potato___Late_blight\n",
    "                       \\Tomato_Bacterial_spot\n",
    "                       \\Tomato_Early_blight\n",
    "                       \\Tomato_healthy\n",
    "                       \\Tomato_Late_blight\n",
    "                       \\Tomato_Leaf_Mold\n",
    "                       \\Tomato_Septoria_leaf_spot\n",
    "                       \\Tomato_Spider_mites_Two_spotted_spider_mite\n",
    "                       \\Tomato__Target_Spot\n",
    "                       \\Tomato__Tomato_mosaic_virus\n",
    "                       \\Tomato__Tomato_YellowLeaf__Curl_Virus\n",
    "```\n",
    "                  \n",
    "In particular, there are a total of 15 classes of image spread across 3 plant species. The dataset contains 20.6 thousand images, each of size 256x256 pixels, which is far too large to quickly train neural networks in order to compare the impact of changing the activation function. Thus to create a balanced subset of the data, I will take the first 200 images from each of the above folders, and downsample the images to size the smallest size typically used for neural network investigations; 32x32.\n",
    "\n",
    "### Data import \n",
    "\n",
    "First I define a function to convert the images to arrays. We use depth = 3 to preserve the colour information of the images, as colour is likely important in disease classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cba7e9a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Set default image size\n",
    "default_image_size = tuple((256, 256))\n",
    "\n",
    "image_size = 0\n",
    "directory_root = '../Data'\n",
    "width=256\n",
    "height=256\n",
    "depth=3 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "484d8dfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# function to convert images to array\n",
    "def convert_image_to_array(image_dir):\n",
    "    try:\n",
    "        image = cv2.imread(image_dir)\n",
    "        if image is not None :\n",
    "            image = cv2.resize(image, default_image_size) \n",
    "          #  gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n",
    "            return img_to_array(image)\n",
    "        else :\n",
    "            return np.array([])\n",
    "    except Exception as e:\n",
    "        print(f\"Error : {e}\")\n",
    "        return None"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b38e021b",
   "metadata": {},
   "source": [
    "Next I import the data into two lists, containing the image arrays and the labels, which are derived from the folder names. Since the image loading takes time to run, the chunk below shows the progress by outputting which folders is being processed. The '.DS_store' condition is present so that the code operates correctly for group members using MAC."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "288f3e04",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[INFO] Loading images ...\n",
      "['Pepper__bell___Bacterial_spot', 'Pepper__bell___healthy', 'Potato___Early_blight', 'Potato___healthy', 'Potato___Late_blight', 'Tomato_Bacterial_spot', 'Tomato_Early_blight', 'Tomato_healthy', 'Tomato_Late_blight', 'Tomato_Leaf_Mold', 'Tomato_Septoria_leaf_spot', 'Tomato_Spider_mites_Two_spotted_spider_mite', 'Tomato__Target_Spot', 'Tomato__Tomato_mosaic_virus', 'Tomato__Tomato_YellowLeaf__Curl_Virus']\n",
      "Pepper__bell___Bacterial_spot\n",
      "Pepper__bell___healthy\n",
      "Potato___Early_blight\n",
      "Potato___healthy\n",
      "Potato___Late_blight\n",
      "Tomato_Bacterial_spot\n",
      "Tomato_Early_blight\n",
      "Tomato_healthy\n",
      "Tomato_Late_blight\n",
      "Tomato_Leaf_Mold\n",
      "Tomato_Septoria_leaf_spot\n",
      "Tomato_Spider_mites_Two_spotted_spider_mite\n",
      "Tomato__Target_Spot\n",
      "Tomato__Tomato_mosaic_virus\n",
      "Tomato__Tomato_YellowLeaf__Curl_Virus\n",
      "[INFO] Processing Pepper__bell___Bacterial_spot ...\n",
      "[INFO] Processing Pepper__bell___healthy ...\n",
      "[INFO] Processing Potato___Early_blight ...\n",
      "[INFO] Processing Potato___healthy ...\n",
      "[INFO] Processing Potato___Late_blight ...\n",
      "[INFO] Processing Tomato_Bacterial_spot ...\n",
      "[INFO] Processing Tomato_Early_blight ...\n",
      "[INFO] Processing Tomato_healthy ...\n",
      "[INFO] Processing Tomato_Late_blight ...\n",
      "[INFO] Processing Tomato_Leaf_Mold ...\n",
      "[INFO] Processing Tomato_Septoria_leaf_spot ...\n",
      "[INFO] Processing Tomato_Spider_mites_Two_spotted_spider_mite ...\n",
      "[INFO] Processing Tomato__Target_Spot ...\n",
      "[INFO] Processing Tomato__Tomato_mosaic_virus ...\n",
      "[INFO] Processing Tomato__Tomato_YellowLeaf__Curl_Virus ...\n",
      "[INFO] Image loading completed\n"
     ]
    }
   ],
   "source": [
    "image_list, label_list = [], []\n",
    "\n",
    "try:\n",
    "    print(\"[INFO] Loading images ...\")\n",
    "    root_dir = listdir(directory_root)\n",
    "    for directory in root_dir :\n",
    "        # remove .DS_Store from list\n",
    "        if directory == \".DS_Store\" :\n",
    "            root_dir.remove(directory)\n",
    "\n",
    "\n",
    "    for plant_folder in root_dir :\n",
    "        plant_disease_folder_list = listdir(f\"{directory_root}/{plant_folder}\")\n",
    "        copy=listdir(f\"{directory_root}/{plant_folder}\")\n",
    "        plant_list = []\n",
    "        print(plant_disease_folder_list)\n",
    "        for disease_folder in copy :\n",
    "            # remove .DS_Store from list\n",
    "            print(disease_folder)\n",
    "            if disease_folder == \".DS_Store\" :\n",
    "                plant_disease_folder_list.remove(disease_folder)\n",
    "            \n",
    "                \n",
    "        for plant_disease_folder in plant_disease_folder_list:\n",
    "            print(f\"[INFO] Processing {plant_disease_folder} ...\")\n",
    "            plant_disease_image_list = listdir(f\"{directory_root}/{plant_folder}/{plant_disease_folder}/\")\n",
    "                \n",
    "            for single_plant_disease_image in plant_disease_image_list :\n",
    "                if single_plant_disease_image == \".DS_Store\" :\n",
    "                    plant_disease_image_list.remove(single_plant_disease_image)\n",
    "\n",
    "            for image in plant_disease_image_list[:200]:\n",
    "                image_directory = f\"{directory_root}/{plant_folder}/{plant_disease_folder}/{image}\"\n",
    "                if image_directory.endswith(\".jpg\") == True or image_directory.endswith(\".JPG\") == True:\n",
    "                    image_list.append(convert_image_to_array(image_directory))\n",
    "                    label_list.append(plant_disease_folder)\n",
    "    print(\"[INFO] Image loading completed\")  \n",
    "except Exception as e:\n",
    "    print(f\"Error : {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "1700eb33",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of images: 1500\n",
      "Number of labels: 1500\n"
     ]
    }
   ],
   "source": [
    "# Checking we have the expected number of images and labels:\n",
    "image_size = len(image_list)\n",
    "print('Number of images: ' + str(image_size))\n",
    "print('Number of labels: ' + str(len(label_list)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f4ffcc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Checking that we have the intended distribution of labels\n",
    "from collections import Counter\n",
    "counts = Counter(label_list)\n",
    "df = pd.DataFrame.from_dict(counts, orient='index')\n",
    "df.plot(kind='bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80235515",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Downsampling\n",
    "\n",
    "We now reduce the dimensions of the array "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "0fc17811",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(256, 256, 3)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "image_list[0].shape\n",
    "#expected size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "c93c704f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(32, 32, 3)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Downsampling\n",
    "\n",
    "input_size = 256\n",
    "output_size = 32\n",
    "bin_size = input_size // output_size\n",
    "\n",
    "for i in range(len(image_list)):\n",
    "    image_list[i] = image_list[i].reshape((output_size, bin_size, \n",
    "                                   output_size, bin_size, 3)).max(3).max(1)\n",
    "image_list[0].shape\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "872bdbb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "2461eaff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "#Binarize labels\n",
    "label_binarizer = LabelBinarizer()\n",
    "image_labels = label_binarizer.fit_transform(label_list)\n",
    "pickle.dump(label_binarizer,open('label_transform.pkl', 'wb'))\n",
    "n_classes = len(label_binarizer.classes_)\n",
    "print(n_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "d668c8de",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Pepper__bell___Bacterial_spot' 'Pepper__bell___healthy'\n",
      " 'Potato___Early_blight' 'Potato___Late_blight' 'Potato___healthy'\n",
      " 'Tomato_Bacterial_spot' 'Tomato_Early_blight' 'Tomato_Late_blight'\n",
      " 'Tomato_Leaf_Mold' 'Tomato_Septoria_leaf_spot'\n",
      " 'Tomato_Spider_mites_Two_spotted_spider_mite' 'Tomato__Target_Spot'\n",
      " 'Tomato__Tomato_YellowLeaf__Curl_Virus' 'Tomato__Tomato_mosaic_virus'\n",
      " 'Tomato_healthy']\n"
     ]
    }
   ],
   "source": [
    "print(label_binarizer.classes_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "1599f2eb",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "image_list = np.array(image_list, dtype=np.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "23028f42",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(image_list, image_labels, test_size=0.2, random_state = 42) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "15b20a49",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1200\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "print(len(x_train))\n",
    "print(len(x_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "dc7faa02",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[[[193., 188., 209.],\n",
       "         [211., 206., 227.],\n",
       "         [175., 170., 191.],\n",
       "         ...,\n",
       "         [184., 178., 195.],\n",
       "         [173., 167., 184.],\n",
       "         [178., 172., 189.]],\n",
       "\n",
       "        [[177., 172., 193.],\n",
       "         [184., 179., 200.],\n",
       "         [190., 185., 206.],\n",
       "         ...,\n",
       "         [174., 168., 185.],\n",
       "         [178., 172., 189.],\n",
       "         [184., 178., 195.]],\n",
       "\n",
       "        [[202., 197., 218.],\n",
       "         [239., 234., 255.],\n",
       "         [190., 185., 206.],\n",
       "         ...,\n",
       "         [184., 178., 195.],\n",
       "         [200., 192., 209.],\n",
       "         [193., 185., 202.]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[218., 210., 227.],\n",
       "         [212., 204., 221.],\n",
       "         [244., 236., 253.],\n",
       "         ...,\n",
       "         [190., 180., 196.],\n",
       "         [187., 177., 193.],\n",
       "         [184., 174., 190.]],\n",
       "\n",
       "        [[225., 215., 232.],\n",
       "         [225., 215., 232.],\n",
       "         [198., 188., 205.],\n",
       "         ...,\n",
       "         [199., 189., 205.],\n",
       "         [198., 188., 204.],\n",
       "         [185., 175., 191.]],\n",
       "\n",
       "        [[207., 197., 214.],\n",
       "         [209., 199., 216.],\n",
       "         [218., 208., 225.],\n",
       "         ...,\n",
       "         [187., 177., 193.],\n",
       "         [200., 190., 206.],\n",
       "         [185., 175., 191.]]],\n",
       "\n",
       "\n",
       "       [[[157., 156., 158.],\n",
       "         [162., 161., 163.],\n",
       "         [166., 163., 165.],\n",
       "         ...,\n",
       "         [148., 147., 151.],\n",
       "         [136., 137., 141.],\n",
       "         [162., 163., 167.]],\n",
       "\n",
       "        [[161., 160., 162.],\n",
       "         [162., 161., 163.],\n",
       "         [170., 167., 169.],\n",
       "         ...,\n",
       "         [142., 141., 145.],\n",
       "         [142., 143., 147.],\n",
       "         [142., 143., 147.]],\n",
       "\n",
       "        [[161., 160., 162.],\n",
       "         [166., 165., 167.],\n",
       "         [162., 161., 163.],\n",
       "         ...,\n",
       "         [155., 156., 160.],\n",
       "         [150., 151., 155.],\n",
       "         [150., 151., 155.]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[168., 167., 171.],\n",
       "         [172., 171., 175.],\n",
       "         [174., 173., 177.],\n",
       "         ...,\n",
       "         [135., 135., 141.],\n",
       "         [126., 126., 132.],\n",
       "         [127., 127., 133.]],\n",
       "\n",
       "        [[167., 166., 170.],\n",
       "         [172., 171., 175.],\n",
       "         [172., 171., 175.],\n",
       "         ...,\n",
       "         [115., 117., 125.],\n",
       "         [125., 128., 133.],\n",
       "         [124., 127., 132.]],\n",
       "\n",
       "        [[168., 167., 171.],\n",
       "         [168., 167., 171.],\n",
       "         [166., 165., 169.],\n",
       "         ...,\n",
       "         [ 76.,  95.,  86.],\n",
       "         [ 98., 101., 106.],\n",
       "         [112., 115., 120.]]],\n",
       "\n",
       "\n",
       "       [[[120., 122., 122.],\n",
       "         [116., 118., 118.],\n",
       "         [111., 116., 115.],\n",
       "         ...,\n",
       "         [137., 139., 139.],\n",
       "         [137., 139., 139.],\n",
       "         [137., 139., 139.]],\n",
       "\n",
       "        [[110., 116., 115.],\n",
       "         [109., 115., 114.],\n",
       "         [108., 113., 112.],\n",
       "         ...,\n",
       "         [139., 141., 141.],\n",
       "         [140., 142., 142.],\n",
       "         [140., 142., 142.]],\n",
       "\n",
       "        [[115., 120., 119.],\n",
       "         [112., 117., 116.],\n",
       "         [111., 116., 115.],\n",
       "         ...,\n",
       "         [138., 140., 140.],\n",
       "         [139., 141., 141.],\n",
       "         [139., 141., 141.]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[ 84.,  92.,  90.],\n",
       "         [ 80.,  91.,  89.],\n",
       "         [ 78.,  83.,  82.],\n",
       "         ...,\n",
       "         [131., 138., 135.],\n",
       "         [135., 140., 138.],\n",
       "         [139., 144., 142.]],\n",
       "\n",
       "        [[ 81.,  86.,  87.],\n",
       "         [ 83.,  88.,  89.],\n",
       "         [ 81.,  91.,  91.],\n",
       "         ...,\n",
       "         [146., 152., 151.],\n",
       "         [139., 144., 142.],\n",
       "         [135., 140., 138.]],\n",
       "\n",
       "        [[ 81.,  86.,  87.],\n",
       "         [ 81.,  86.,  87.],\n",
       "         [ 78.,  86.,  86.],\n",
       "         ...,\n",
       "         [131., 137., 136.],\n",
       "         [135., 140., 138.],\n",
       "         [135., 140., 138.]]],\n",
       "\n",
       "\n",
       "       [[[154., 151., 166.],\n",
       "         [160., 157., 172.],\n",
       "         [149., 146., 162.],\n",
       "         ...,\n",
       "         [159., 156., 172.],\n",
       "         [147., 144., 159.],\n",
       "         [161., 158., 173.]],\n",
       "\n",
       "        [[153., 150., 165.],\n",
       "         [157., 154., 169.],\n",
       "         [157., 154., 170.],\n",
       "         ...,\n",
       "         [149., 146., 162.],\n",
       "         [152., 149., 164.],\n",
       "         [149., 146., 161.]],\n",
       "\n",
       "        [[170., 167., 182.],\n",
       "         [160., 157., 172.],\n",
       "         [160., 157., 172.],\n",
       "         ...,\n",
       "         [152., 149., 165.],\n",
       "         [162., 159., 175.],\n",
       "         [154., 151., 167.]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[189., 184., 199.],\n",
       "         [177., 172., 187.],\n",
       "         [191., 187., 199.],\n",
       "         ...,\n",
       "         [191., 187., 199.],\n",
       "         [182., 178., 190.],\n",
       "         [201., 197., 209.]],\n",
       "\n",
       "        [[173., 169., 181.],\n",
       "         [187., 183., 195.],\n",
       "         [187., 183., 195.],\n",
       "         ...,\n",
       "         [194., 190., 202.],\n",
       "         [197., 193., 205.],\n",
       "         [192., 188., 200.]],\n",
       "\n",
       "        [[175., 171., 183.],\n",
       "         [187., 183., 195.],\n",
       "         [201., 197., 209.],\n",
       "         ...,\n",
       "         [178., 174., 186.],\n",
       "         [190., 186., 198.],\n",
       "         [195., 191., 203.]]],\n",
       "\n",
       "\n",
       "       [[[186., 177., 190.],\n",
       "         [191., 182., 195.],\n",
       "         [201., 191., 207.],\n",
       "         ...,\n",
       "         [222., 215., 230.],\n",
       "         [225., 218., 233.],\n",
       "         [233., 226., 241.]],\n",
       "\n",
       "        [[193., 184., 197.],\n",
       "         [189., 180., 193.],\n",
       "         [193., 183., 199.],\n",
       "         ...,\n",
       "         [240., 233., 248.],\n",
       "         [235., 228., 243.],\n",
       "         [229., 222., 237.]],\n",
       "\n",
       "        [[187., 178., 191.],\n",
       "         [190., 181., 194.],\n",
       "         [189., 179., 195.],\n",
       "         ...,\n",
       "         [214., 206., 223.],\n",
       "         [241., 235., 252.],\n",
       "         [222., 216., 233.]],\n",
       "\n",
       "        ...,\n",
       "\n",
       "        [[180., 172., 189.],\n",
       "         [177., 169., 186.],\n",
       "         [176., 168., 185.],\n",
       "         ...,\n",
       "         [201., 197., 216.],\n",
       "         [202., 198., 217.],\n",
       "         [182., 178., 197.]],\n",
       "\n",
       "        [[180., 173., 188.],\n",
       "         [192., 185., 200.],\n",
       "         [182., 174., 191.],\n",
       "         ...,\n",
       "         [232., 228., 247.],\n",
       "         [192., 186., 205.],\n",
       "         [186., 180., 199.]],\n",
       "\n",
       "        [[185., 178., 193.],\n",
       "         [207., 200., 215.],\n",
       "         [187., 179., 196.],\n",
       "         ...,\n",
       "         [169., 165., 184.],\n",
       "         [211., 205., 224.],\n",
       "         [182., 176., 195.]]]], dtype=float32)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "5a306328",
   "metadata": {},
   "outputs": [],
   "source": [
    "# save numpy array as npy file\n",
    "from numpy import asarray\n",
    "from numpy import save\n",
    "# define data\n",
    "# save to npy file\n",
    "save('x_train_sample.npy', x_train)\n",
    "save('y_train_sample.npy', y_train)\n",
    "save('x_test_sample.npy', x_test)\n",
    "save('y_test_sample.npy', y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5313ce17",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
